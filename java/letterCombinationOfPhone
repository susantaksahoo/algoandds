//Time complexity is O(n2)
	public static List<String>  letterCombinations(String number) {
		
		LinkedList<String> list = new LinkedList<String>();
		
		String[] table = { "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" }; 
		
		list.add("");
		for(int i = 0; i < number.length(); i++) {
			String ds = table[number.charAt(i)   - '0'];
			while(list.peek().length() == i) {
				String s = list.poll();
				for(int j = 0; j < ds.length(); j ++) {
					list.add(s + ds.charAt(j));
				}
			}
		}
		return list;
		
	}
  /*
	 * Recursion version 
	 * Assuming the average number of letters on every number is m, and the length of digits string is n, then the complexity is O(mn).
	 */
	
	 public List<String> letterCombinationsRecursion(String digits) {
	        String[] letters = {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
	        List<String> rec = new LinkedList<>();
	        StringBuilder string = new StringBuilder();
	        letterCombinations(digits, 0, letters, string, rec);
	        return rec;
	    }
	    
	    private void letterCombinations(String digits, int number, String[] letters, StringBuilder string, List<String> rec) {
	        if (digits.length() == number) {
	            rec.add(string.toString());
	            return;
	        }
	        String letter = letters[digits.charAt(number) - '2'];
	        for (int i = 0; i < letter.length(); i++) {
	            string.append(letter.charAt(i));
	            letterCombinations(digits, number + 1, letters, string, rec);
	            string.deleteCharAt(string.length() - 1);
	        }
	    }
	    
	    /*
	 * Iterative way
	 * Assuming the average number of letters on every number is m, and the length of digits string is n, then the complexity is O(mn).
	 */

	public static List<String> letterCombinations(String digits) {
		String[] letters = { "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
		LinkedList<String> list = new LinkedList<>();
		list.add("");
		for (int i = 0; i < digits.length(); i++) {
			int num = digits.charAt(i) - '2';
			int size = list.size();
			for (int k = 0; k < size; k++) {
				String tmp = list.pop();
				for (int j = 0; j < letters[num].length(); j++)
					list.add(tmp + letters[num].charAt(j));
			}
		}
		List<String> rec = new LinkedList<>();
		rec.addAll(list);
		return rec;
	}
